# <%= projectName %> - React Native

# Prerequisites

Follow the [official guide](https://facebook.github.io/react-native/docs/getting-started.html) to properly setup your environment.
We highly recommend using [nvm](https://github.com/creationix/nvm) instead of brew or aptitude to install nodejs.

---

# Proyect Set Up

## One time setup

<%_ if(features.hasFirebase) { _%>
### Google Services files setup

You must create a folder with the google-services.json files into the corresponding platform like this:

#### Android

`android/app/google-services`

#### IOS

`ios/GoogleServices`

then put the corresponding google services files on each one.

this folders are ignored by default.

The `firebaseFilesScript.sh` will get the build environment and setup the needed google service file for it.
<%_ } _%>

### ENV setup

Each environment has its env file with the following filename format:
`.[environment].env`

You must create the following env files corresponding to each environment.

`.dev.env`
`.stage.env`
`.production.env`

Create all the env files in the root with the following vars corresponding to the environment that belongs:

```
API_BASE_URL=https://XXXXXXX
OTHER_ENV_VARs=XXXXXXXXXX
```

### Android

Set the following variables in `~/.gradle/gradle.properties`

```
MY_PROYECT_RELEASE_STORE_FILE=my_proyect-key.keystore
MY_PROYECT_RELEASE_KEY_ALIAS=my_proyect-key
MY_PROYECT_RELEASE_STORE_PASSWORD=xxxxxxxx
MY_PROYECT_RELEASE_KEY_PASSWORD=xxxxxxxx
```

Update the file `android/app/build.gradle` according to this [guide](https://facebook.github.io/react-native/docs/signed-apk-android.html#adding-signing-config-to-your-app-s-gradle-config) using the variables set in `~/.gradle/gradle.properties`

Generate the file `my_proyect-key.keystore` using the following command from your terminal and place it in the `android/app` folder

```
$ keytool -genkey -v -keystore my_proyect-key.keystore -alias my_proyect-key -keyalg RSA -keysize 2048 -validity 10000

Enter keystore password: xxxxx
Re-enter new password: xxxxx
What is your first and last name?
  [Unknown]:  wolox
What is the name of your organizational unit?
  [Unknown]:  wolox
What is the name of your organization?
  [Unknown]:  wolox
What is the name of your City or Locality?
  [Unknown]:  wolox
What is the name of your State or Province?
  [Unknown]:  wolox
What is the two-letter country code for this unit?
  [Unknown]:  wx
Is CN=wolox, OU=wolox, O=wolox, L=wolox, ST=wolox, C=wx correct?
  [no]:  yes

Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 10,000 days
	for: CN=wolox, OU=wolox, O=wolox, L=wolox, ST=wolox, C=wx
Enter key password for <my_proyect-key>
	(RETURN if same as keystore password):  xxxxx
Re-enter new password: xxxxx
[Storing my_proyect-key.keystore]
```

### iOS

We use [FastLane](https://github.com/Wolox/fastlane-mobile) and few of its plugins to automate many ios tasks:

- Interact with Apple Developer Portal and iTunes Connect.
- Automate code signing (Certificates and provisioning profiles handling. Take a look at [match](https://github.com/fastlane/fastlane/tree/master/match))
- Uploading builds to Testflight ([gym](https://github.com/fastlane/fastlane/tree/master/pilot))

#### FastLane setup

Make sure you have the latest version of the Xcode command line tools installed:

```
xcode-select --install
```

Follow this [guide](https://github.com/rvm/rvm) to properly install rvm. This tool will easily allow you to install and change different ruby versions.

Run `rvm -v` to check that it was successfully installed.

The last step is installing Fastlane gems:

```bash
gem install bundler
bundle install
```

---

# Running aplication

This proyect supports many `Debug`, `QA`, `Stage`, and `Production` environments.  
The following enviorments are supported:

## iOS

- Dev - Scheme: `dev`
- Dev - Configuration: `Debug`
- QA - Scheme: `qa`
- QA - Configurations: `Debug` or `QA`
- Stage - Scheme: `stage`
- Stage - Configurations: `Debug` or `Stage`
- Production - Scheme: `production`
- Production - Configurations: `Debug` or `Production`

**The default configuration is `Debug`.**

## Android

- Dev/QA - Debug: `qaDebug`
- Dev/QA - Release: `qaRelease`
- Stage - Debug: `stageDebug`
- Stage - Release: `stageRelease`
- Production - Debug: `productionDebug`
- Production - Release: `productionRelease`

To run a Android/iOS simulator with determinated environment, just run:

**ANDROID**  
`npx react-native run-android --variant=[build variant]`
For Example:  
`npx react-native run-android --variant=qaDebug`
or
`npx react-native run-android --variant=qaRelease`

**iOS**  
`npx react-native run-ios --scheme [scheme] [--configuration [configuration]](optional)`

For Example:  
`npx react-native run-ios --scheme qa`(Debug configuration)

or

`npx react-native run-ios --scheme dev --configuration Release`

---

# Outputs

## Android

Use the the command in the rootpath to generate the APK:

```
yarn run android:build.[environment]
```

For example:

```
yarn run android:build.qa
```

It will generate the apk file in the path `android/app/build/outputs/apk/[environment]/release/app-[environment]-release.apk`

### Uploading build to Firebase App Distribution

Use the following commands inside the Android project folder:

1. Install gems with: `bundle install`
2. Authenticate with Firebase using Firebase-CLI: `firebase login`. If you don't have `Firebase-CLI` installed you can do it with the following command: `npm install -g firebase-tools`.
3. Run: `bundle exec fastlane android distribute_qa`.

#### Available Lanes

There is a lot of fastlane lanes that will help you to make deploys to Firebase App Distribution and Google Play Console too.

Follow the instructions in the [Fastlane README](android/fastlane/README.md) to see all available lanes.

## iOS

### Uploading build to Testflight
Use the following commands inside the iOS project folder:

1. We need to create the app in the AppStore first if it isn't already created. You must be use `bundle exec fastlane create_development_app`. The lane depends of environment, you can use `bundle exec fastlane create_stage_app` or `bundle exec fastlane create_production_app`
2. Then you must be use `bundle exec fastlane release_qa` also there are other lanes to deploy to differents environments. You can use `bundle exec fastlane release_stage` or
   `bundle exec fastlane release_production`

Follow the instructions in the [Fastlane README](ios/fastlane/README.md) that will help you to create apps, certificates, make deploys and more.

#### Available Lanes

There is a lot of fastlane lanes that will help you to create apps, certificates, make deploys and more.

Follow the instructions in the [Fastlane README](ios/fastlane/README.md) to see all available lanes.

---
<%_ if(features.bitrise) { _%>

# Bitrise

This documentation shows how to integrate your React Native project with [Bitrise](https://bitrise.io).

## Prerequisites

- You need access to a [Bitrise](https://bitrise.io) account

## Convert secret variables to base64:

All the files that are necessary to deploy:

- `.env` files
- Google services files for both Android and iOS
- Android keystore
- Android Gradle properties

These files need to be stored in environment variables in Bitrise.

For this process you need to perform some steps from the terminal in bash.

In the next example, we will move the .env files to Bitrise

### 1) Convert .env files to base64:

Go to the root folder of your project and run this command:

```bash
tar -czvf /tmp/environment.tar.gz .*.env && base64 /tmp/environment.tar.gz
```

This command will convert all the .env files of the project and print something like this:

```
a .dev.env
a .production.env
a .stage.env

H4sIAB2Rcl4AA-0SwU7DMAyGd+5TRLnTpavpULVuPAAnXmAyabpEa5MqcTd4e7K2EJAY0pAQQup3cWL9dmL5B1M5qysVXce8E6wFbZiTnjXwYnsMoTdC7bxwUpr4uW0W18M5z7OMnOMqz4fIl+N9IMs4SdW8TVd5dpsnhC/TLE0WhP/gravpPYILX9//EeDGovL+mCrK6/6TQt7jP2G9DTslR+m8tqakScwpkUbYSpt9SXusb+7odhOtH2UDqI/yYbAFCUXGFzCap6QKsSsY80LJFnw85WNh22Csw+CnKUcjQqZjYZ2WBkPb88vhC6gFNB8Fowd3J12hKmkLGJzYgQtFX6iU1HuFl2VPIA57Z3tTlYTev2WFbaxjJ6VR0jAm+zznJvrr/czMzMz8Fq/N2GtmAAgdAA==
```

Copy the code, well'll need it in the next step.

To convert other files, replace `.*.env` with the files you want to convert.

\*In case the command doesn't print anything, check if you have `base64` installed.

### 2) Export the code to a Bitrise Secret variable:

1. Go to your project in [bitrise.io](https://bitrise.io)
2. In the Secrets tab add a base64 variable named `environment_tar_gz`
3. Paste the code created in Step 1
4. Save changes

### 3) Extract the secret variable in the bitrise script (bitrise.yml):

We need to extract the `environment_tar_gz` variable in the building process, so we add this in the build script

```bash
cd  ${DIRECTORY_TO_EXTRACT}
echo  ${environment_tar_gz} | base64 -D | tar -xz
```

Or we can use this function in bash:

```bash
function  extract_base64 () {
	cd  $2
	echo  $1 | base64 -D | tar -xz
}

extract_base64 ${environment_tar_gz}  ${DIRECTORY_TO_EXTRACT}
```

In our example, we need to extract the .env files in the root folder, so we add

`extract_base64 ${environment_tar_gz} $HOME/git/`

## Deploy using Bitrise:

To deploy a new version of the app in Android or iOS we need to create a tag from a specific branch.

Example of how to create a deploy to the development environment:

1. Move to the `development` branch:
2. Set variables for the device, environment and version of the new build
3. Create a new tag using the variables
4. Push the new tag

```bash
git checkout development

git pull origin development

DEVICE=android

ENVIRONMENT=qa

VERSION=1.0.0

FEATURE=`feature name (e.g., "login")`

git tag -a $DEVICE-$ENVIRONMENT-$VERSION-$FEATURE -m "Comment about the release" && git push origin $DEVICE-$ENVIRONMENT-$VERSION-$FEATURE
```

Or directly:

```bash
git checkout development

git pull origin development

git tag -a android-qa-1.0.0-login -m "Comment about the release" && git push origin android-qa-1.0.0-login
```

### Possible values:

These are the supported values for each variable of the TAG:

- DEVICE: `android` or `ios`

- ENVIRONMENT: `qa` `stage` or `prod`

- VERSION: Given a version number MAJOR.MINOR.PATCH, you should increment:

1. MAJOR when you make incompatible API changes.
2. MINOR when you add functionality in a backwards-compatible manner.
3. PATCH when you make backwards-compatible bug fixes or small changes

- FEATURE: name of the feature or release that you are going to deploy

---
<%_ } _%>
