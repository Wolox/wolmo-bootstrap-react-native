import { createStore, applyMiddleware, compose, combineReducers } from 'redux';
import Reactotron from 'reactotron-react-native';
import thunk from 'redux-thunk';
import { fetchMiddleware, configureMergeState } from 'redux-recompose';
<%_ if(features.reduxpersist) { _%>
import AsyncStorage from '@react-native-community/async-storage';
import { persistReducer } from 'redux-persist';
import {
  seamlessImmutableReconciler,
  seamlessImmutableTransformCreator
} from 'redux-persist-seamless-immutable';
<%_ } _%>
<%_ if(features.firebaseanalytics) { _%>

import AnalyticsMiddleware from './middlewares/analyticsMiddleware';
<%_ } else { _%>

<%_ } _%>
<%_ if(features.login) { _%>
import auth from './auth/reducer';
<%_ } _%>
<%_ if(features.reduxpersist) { _%>

const transformerConfig = {
  whitelistPerReducer: {
  <%_ if(features.login) { _%>
    auth: ['currentUser']
  <%_ } _%>
  }
};

const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
  whitelist: [<%_ if(features.login) { _%>'auth'<%_ } _%>],
  stateReconciler: seamlessImmutableReconciler,
  transforms: [seamlessImmutableTransformCreator(transformerConfig)]
};
<%_ } _%>

configureMergeState((state, diff) => state.merge(diff));

const reducers = combineReducers({
<%_ if(features.login) { _%>
  auth
<%_ } _%>
});
<%_ if(features.reduxpersist) { _%>

const persistedReducer = persistReducer(persistConfig, reducers);
<%_ } _%>

const middlewares = [];
const enhancers = [];

/* ------------- React Navigation Middleware ------------- */
middlewares.push(createReactNavigationReduxMiddleware(state => state.nav));

/* ------------- Thunk Middleware ------------- */
middlewares.push(thunk);

/* ------------- Redux-Recompose Middleware ------------- */
middlewares.push(fetchMiddleware);

<%_ if(features.firebaseanalytics) { _%>
/* ------------- Analytics Middleware ------------- */
middlewares.push(AnalyticsMiddleware);
<%_ } _%>

/* ------------- Assemble Middleware ------------- */
enhancers.push(applyMiddleware(...middlewares));

if (__DEV__) enhancers.push(Reactotron.createEnhancer(true));

// In DEV mode, we'll create the store through Reactotron
const store = createStore(<%_ if(features.reduxpersist) { _%>persistedReducer<%_ } else{ _%>reducers<%_ } _%>, compose(...enhancers));

if (__DEV__) Reactotron.setReduxStore(store);

export default store;
