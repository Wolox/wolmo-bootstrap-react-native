<%_ if(features.login) { _%>
import { createReducer, completeReducer, completeState, onSuccess<%_ if(features.onboarding) { _%>, onReadValue<%_ } _%> } from 'redux-recompose';
import Immutable from 'seamless-immutable';
import PropTypes from 'prop-types';

import { actions } from './actions';

const stateDescription = {
  currentUser: null,
  initialLoading: true<%_ if(features.onboarding) { _%>,
  hasAccessOnBoarding: false
  <%_ }_%>
};

export const initialState = completeState(stateDescription, ['initialLoading'<%_ if(features.onboarding) { _%>, 'hasAccessOnBoarding'<%_ } _%>]);

const reducerDescription = {
  primaryActions: [actions.LOGIN],
  override: {
    [actions.AUTH_INIT]: (state, action) =>
      state.merge({ initialLoading: false, [action.target]: action.payload }),
    [actions.LOGOUT]: onSuccess()<%_ if(features.onboarding) { _%>,
    [actions.HAS_ACCESS]: onReadValue()<%_ } _%>
  }
};

export default createReducer(Immutable(initialState), completeReducer(reducerDescription));

export const propTypes = {
  currentUser: PropTypes.shape({
    email: PropTypes.string.isRequired
    // TODO: Extend user model definition
  })
};
<%_ } _%>
<%_ if(!features.login) { _%>
import { createReducer, onReadValue } from 'redux-recompose';
import Immutable from 'seamless-immutable';

import { actions } from './actions';

const initialState = {
  hasAccessOnBoarding: false,
  initialLoading: true
};

const reducerDescription = {
  [actions.AUTH_INIT]: (state, action) =>
    state.merge({
      initialLoading: false,
      [action.target]: action.payload
    }),
  [actions.HAS_ACCESS]: onReadValue()
};

export default createReducer(Immutable(initialState), reducerDescription);
<%_ } _%>