<%_ if(features.login) { _%>
import { SwitchActions } from 'react-navigation';
import { createTypes, completeTypes, withPostSuccess } from 'redux-recompose';
import * as AuthService from '@services/AuthService';
import Routes from '@constants/routes';

export const actions = createTypes(completeTypes(['LOGIN'], ['AUTH_INIT', 'LOGOUT'<%_ if(features.onboarding) { _%>, 'HAS_ACCESS'<%_ } _%>]), '@@AUTH');

const loginTarget = 'currentUser';
<%_ if(features.onboarding) { _%>const onBoardingTarget = 'hasAccessOnBoarding';<%_ } _%>

export const actionCreators = {
  init: (user<%_ if(features.onboarding) { _%>, hasAccessOnBoarding<%_ } _%>) => ({
    type: actions.AUTH_INIT,
    target: loginTarget,
    payload: user<%_ if(features.onboarding) { _%>,
    hasAccessOnBoarding
    <%_ } _%>
  }),
  login: authData => ({
    type: actions.LOGIN,
    target: loginTarget,
    service: AuthService.login,
    payload: authData,
    injections: [
      withPostSuccess((dispatch, response) => {
        AuthService.setCurrentUser(response.data);
      })
    ]
  }),
  logout: () => async dispatch => {
    await AuthService.removeCurrentUser();
    dispatch(actionCreators.setHasAccessOnBoarding(false));
    dispatch({ type: actions.LOGOUT, target: loginTarget });
  }<%_ if(features.onboarding) { _%>,
  setHasAccessOnBoarding: value => async dispatch => {
    await setOnBoardingAccess(value);
    dispatch({
      type: actions.HAS_ACCESS,
      target: onBoardingTarget,
      payload: value
    });
  }
  <%_ }_%>
};
<%_ } _%>
<%_ if(!features.login) { _%>
import { createTypes } from 'redux-recompose';
import { setOnBoardingAccess } from '@services/OnBoardingService';

export const actions = createTypes(['HAS_ACCESS'], '@@AUTH');

const onBoardingTarget = 'hasAccessOnBoarding';
export const actionCreators = {
  init: hasAccessOnBoarding => ({
    type: actions.AUTH_INIT,
    target: onBoardingTarget,
    payload: hasAccessOnBoarding
  }),
  setHasAccessOnBoarding: value => async dispatch => {
    await setOnBoardingAccess(value);
    dispatch({
      type: actions.HAS_ACCESS,
      target: onBoardingTarget,
      payload: value
    });
  }
};
<%_ } _%>
<%_ if(!features.login && !features.onboarding) { _%>
import { createTypes } from 'redux-recompose';

export const actions = createTypes(['AUTH_INIT'], '@@AUTH');

export const actionCreators = {
  init: () => ({
    type: actions.AUTH_INIT
  })
};

<%_ } _%>
