import { SwitchActions } from 'react-navigation';
import { createTypes, completeTypes, withPostSuccess } from 'redux-recompose';
import * as AuthService from '@services/AuthService';
import Routes from '@constants/routes';

export const actions = createTypes(completeTypes(['LOGIN'], ['AUTH_INIT', 'LOGOUT', 'HAS_ACCESS']), '@@AUTH');

const loginTarget = 'currentUser';
const onBoardingTarget = 'hasAccessOnBoarding';

export const actionCreators = {
  init: (user, hasAccessOnBoarding) => ({
    type: actions.AUTH_INIT,
    target: loginTarget,
    payload: user,
    hasAccessOnBoarding
  }),
  login: authData => ({
    type: actions.LOGIN,
    target: loginTarget,
    service: AuthService.login,
    payload: authData,
    injections: [
      withPostSuccess((dispatch, response) => {
        AuthService.setCurrentUser(response.data);
      })
    ]
  }),
  logout: () => async dispatch => {
    await AuthService.removeCurrentUser();
    dispatch(actionCreators.setHasAccessOnBoarding(false));
    dispatch({ type: actions.LOGOUT, target: loginTarget });
  },
  setHasAccessOnBoarding: value => async dispatch => {
    await setOnBoardingAccess(value);
    dispatch({
      type: actions.HAS_ACCESS,
      target: onBoardingTarget,
      payload: value
    });
  }
};
