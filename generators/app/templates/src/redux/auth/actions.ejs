<%_ if(features.loginandsignup) { _%>
import { ApiOkResponse } from 'apisauce';
import { Dispatch } from 'react';
import { createTypes, completeTypes, withPostSuccess } from 'redux-recompose';
import * as AuthService from '@services/AuthService';
import { CurrentUser, AuthData } from '@interfaces/authInterfaces';
import { Action } from '@interfaces/reduxInterfaces';
<%_ if(features.onboarding) { _%>
import { setOnBoardingAccess } from '@services/OnBoardingService';
<%_ } _%>

export const actions = createTypes(completeTypes(['LOGIN', 'LOGOUT'], ['AUTH_INIT'<%_ if(features.onboarding) { _%>, 'HAS_ACCESS'<%_ } _%>]), '@@AUTH');

const TARGETS = {
<%_ if(features.onboarding) { _%>
  ONBOARDING: 'hasAccessOnBoarding',
<%_ } _%>
  CURRENT_USER: 'currentUser'
};

export const actionCreators = {
  init: () => async (dispatch: Dispatch<Action>) => {
  <%_ if(features.onboarding) { _%>
    const { currentUser, hasAccess } = await AuthService.authSetup();
  <%_ } else { _%>
    const currentUser = await AuthService.authSetup();
  <%_ } _%>
    dispatch({
      type: actions.AUTH_INIT,
      target: TARGETS.CURRENT_USER,
      <%_ if(features.onboarding) { _%>
      hasAccessOnBoarding: hasAccess,
      <%_ } _%>
      payload: currentUser
    });
  },
  login: (authData: AuthData) => ({
    type: actions.LOGIN,
    target: TARGETS.CURRENT_USER,
    service: AuthService.login,
    payload: authData,
    injections: [
      withPostSuccess((_: any, response: ApiOkResponse<CurrentUser>) => {
        AuthService.setCurrentUser(response.data!);
      })
    ]
  }),
  logout: () => ({
    type: actions.LOGOUT,
    target: TARGETS.CURRENT_USER,
    service: AuthService.logout,
    injections: [
      withPostSuccess(async (<%_ if(features.onboarding) { _%>dispatch: Dispatch<any><%_ } _%>) => {
        await AuthService.removeCurrentUser();
      <%_ if(features.onboarding) { _%>
        dispatch(actionCreators.setHasAccessOnBoarding(false));
      <%_ } _%>
      })
    ]
  })<%_ if(features.onboarding) { _%>,
  setHasAccessOnBoarding: (value: boolean) => async (dispatch: Dispatch<any>) => {
    await setOnBoardingAccess(value);
    dispatch({
      type: actions.HAS_ACCESS,
      target: TARGETS.ONBOARDING,
      payload: value
    });
  }
  <%_ }_%>
};
<%_ } else if (features.onboarding) { _%>
import { Dispatch } from 'react';
import { createTypes } from 'redux-recompose';
import { Action } from '@interfaces/reduxInterfaces';
import * as AuthService from '@services/AuthService';
import { setOnBoardingAccess } from '@services/OnBoardingService';

export const actions = createTypes(['AUTH_INIT', 'HAS_ACCESS'], '@@AUTH');

const TARGETS = {
  ONBOARDING: 'hasAccessOnBoarding'
};

export const actionCreators = {
  init: () => async (dispatch: Dispatch<Action>) => {
    const hasAccess = await AuthService.authSetup();
    dispatch({
      type: actions.AUTH_INIT,
      target: TARGETS.ONBOARDING,
      payload: hasAccess
    });
  },
  setHasAccessOnBoarding: (value: boolean) => async (dispatch: Dispatch<Action>) => {
    await setOnBoardingAccess(value);
    dispatch({
      type: actions.HAS_ACCESS,
      target: TARGETS.ONBOARDING,
      payload: value
    });
  }
};
<%_ } else { _%>
import { createTypes } from 'redux-recompose';

export const actions = createTypes(['AUTH_INIT'], '@@AUTH');

export const actionCreators = {
  init: () => ({ type: actions.AUTH_INIT })
};
<%_ } _%>
