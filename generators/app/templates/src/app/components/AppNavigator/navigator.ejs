import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
<%_ if(features.tabs) { _%>
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
<%_ } _%>
<%_ if(features.drawer) { _%>
import { createDrawerNavigator } from '@react-navigation/drawer';
<%_ } _%>
<%_ if(features.onboarding || features.loginandsignup) { _%>
import { useSelector } from 'react-redux';
import { State } from '@interfaces/reduxInterfaces';
<%_ } _%>
import Routes from '@constants/routes';
import { <%_ if(features.loginandsignup) { _%>authStackNavConfig,<%_ } _%> appStackNavConfig<%_ if(features.drawer) { _%>, drawerStackNavConfig <%_ }_%><%_ if(features.tabs) { _%>, tabNavConfig <%_ }_%>} from '@config/navigation';
import { inferRoute } from '@utils/navUtils';
<%_ if(features.loginandsignup) { _%>
import Login from '@authScreens/Login';
import SignUp from '@authScreens/SignUp';
<%_ } _%>
<%_ if(features.onboarding) { _%>
import OnBoarding from '@screens/OnBoarding';
<%_ } _%>
import Home from '@screens/Home';

const Stack = createStackNavigator();
<%_ if(features.loginandsignup) { _%>

const AuthStack = () => (
  <>
    {inferRoute(Stack)({ [Routes.Login]: Login })}
    {inferRoute(Stack)({ [Routes.SignUp]: SignUp })}
  </>
);
<%_ } _%>
<%_ if(features.tabs) { _%>

const Tab = createBottomTabNavigator();
function HomeTabs() {
  return (
    <Tab.Navigator {...tabNavConfig}>
      {inferRoute(Tab)({ [Routes.Tab1]: Home })}
      {inferRoute(Tab)({ [Routes.Tab2]: Home })}
    </Tab.Navigator>
  );
}
<%_ } _%>
<%_ if(features.drawer) { _%>

const Drawer = createDrawerNavigator();
function DrawerNavigator() {
  return (
    <Drawer.Navigator {...drawerStackNavConfig}>{inferRoute(Drawer)({ [Routes.Home]: <%_ if(features.tabs) { _%>HomeTabs<%_ }else{ _%>Home <%_ } _%> })}</Drawer.Navigator>
  );
}

function AppStack() {
  return <>{inferRoute(Stack)({ [Routes.Home]: DrawerNavigator })}</>;
}
<%_ } else { _%>

function AppStack() {
  return <>{inferRoute(Stack)({ [Routes.Home]: <%_ if(features.tabs) { _%>HomeTabs<%_ } else { _%>Home <%_ } _%> })}</>;
}
<%_ } _%>

<%_ if(features.onboarding) { _%>
const OnBoardingStack = () => (<>{inferRoute(Stack)({ [Routes.OnBoarding]: OnBoarding })}</>);

const Navigator = () => {
  const hasAccessOnBoarding = useSelector((state: State) => state.auth.hasAccessOnBoarding);
  <%_ if(features.loginandsignup) { _%>
  const currentUser = useSelector((state: State) => state.auth.currentUser);
  const defaultStackConfig = currentUser ? appStackNavConfig : authStackNavConfig;
  return (
    <Stack.Navigator {...defaultStackConfig}>
      {currentUser ? (hasAccessOnBoarding ? AppStack() : OnBoardingStack()) : AuthStack()}
    </Stack.Navigator>
  );
  <%_ } else { _%>
  return (
    <Stack.Navigator {...appStackNavConfig}>
      {hasAccessOnBoarding ? AppStack() : OnBoardingStack()}
    </Stack.Navigator>
  );
  <%_ }_%>
};
<%_ } else { _%>
const Navigator = () => {
  <%_ if(features.loginandsignup) { _%>
  const currentUser = useSelector((state: State) => state.auth.currentUser);
  const defaultStackConfig = currentUser ? appStackNavConfig : authStackNavConfig;
  return <Stack.Navigator {...defaultStackConfig}>{currentUser ? AppStack() : AuthStack()}</Stack.Navigator>;
  <%_ } else { _%>
  return <Stack.Navigator {...appStackNavConfig}>{AppStack()}</Stack.Navigator>;
  <%_ } _%>
};
<%_ } _%>

export default Navigator;
