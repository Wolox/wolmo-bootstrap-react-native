import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { useSelector } from 'react-redux';
import withLoadable from '@components/Loadable';
import Routes from '@constants/routes';
import { authStackNavConfig, appStackNavConfig } from '@config/navigation';
import { inferRoute } from '@utils/navUtils';
import Login from '@screens/Login';
import OnBoarding from '@screens/OnBoarding';
import Home from '@screens/Home';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

const AuthStack = () => <>{inferRoute(Stack)({ Login })}</>;

function HomeTabs() {
  return (
    <Tab.Navigator>
      {inferRoute(Tab)({ [Routes.Tab1]: Home })}
      {inferRoute(Tab)({ [Routes.Tab2]: Home })}
    </Tab.Navigator>
  );
}

function AppStack() {
  return <>{inferRoute(Stack)({ [Routes.Home]: HomeTabs })}</>;
}

// const DrawerStack = createDrawerNavigator(
//   {
//     [Routes.App]: AppStack,
//     // TODO: Modify drawer screens here
//     Example1: { screen: Home },
//     Example2: { screen: Home }
//   },
//   drawerStackNavConfig
// );

const initialLoadingSelector = state => state.auth.initialLoading;

const Navigator = () => {
  const hasAccessOnBoarding = useSelector(state => state.auth.hasAccessOnBoarding);
  const currentUser = useSelector(state => state.auth.currentUser);
  const defaultStackConfig = currentUser ? appStackNavConfig : authStackNavConfig;
  return (
    <Stack.Navigator {...defaultStackConfig}>
      {currentUser ? (hasAccessOnBoarding ? AppStack() : inferRoute(Stack)({ OnBoarding })) : AuthStack()}
    </Stack.Navigator>
  );
};

export default withLoadable(() => useSelector(initialLoadingSelector))(Navigator);
