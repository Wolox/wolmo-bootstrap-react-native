import Immutable from 'seamless-immutable';
import Reactotron, { asyncStorage, overlay, trackGlobalErrors } from 'reactotron-react-native';
import apisaucePlugin from 'reactotron-apisauce';
import { reactotronRedux } from 'reactotron-redux';
import { NativeModules } from 'react-native';

// If you want to use a physical device and connect it to reactotron, execute first `adb reverse tcp:9090 tcp:9090`
if (__DEV__) {
  const { scriptURL } = NativeModules.SourceCode;
  const scriptHostname = scriptURL.split('://')[1].split(':')[0];
  Reactotron.configure({ name: '<%= projectName %>', host: scriptHostname })
    .use(trackGlobalErrors())
    .use(apisaucePlugin())
    .use(
      reactotronRedux({
        onRestore: state =>
          Object.entries(state).reduce(
            (prev, [key, value]) => ({ ...prev, [key]: key === 'nav' ? value : Immutable(value) }),
            {}
          )
      })
    )    
    .use(asyncStorage())
    .use(overlay())
    .connect();
  // eslint-disable-next-line no-console
  console.tron = {
    log: value => Reactotron.logImportant(JSON.stringify(value, null, 2)),
    clear: () => Reactotron.clear(),
    customCommand: ({ command, description, handler, title }) =>
      Reactotron.onCustomCommand({
        command,
        description,
        handler,
        title
      }),
    display: ({ image, name, preview, value }) =>
      Reactotron.display({
        name: name || 'DISPLAY',
        value: JSON.stringify(value, null, 2),
        preview: preview || 'Click para mostrar detalle',
        important: true,
        image
      })
    };
  }

export default Reactotron;
